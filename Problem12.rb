# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number 
# would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

def get_triangle_number(nth_number)
  (0..nth_number).reduce(:+)
end

def divisor_count(triangle_number)
  sqrt_of_num = Math.sqrt(triangle_number).floor
  first_divisors = (1..sqrt_of_num).select { |i| triangle_number % i == 0 }
  second_divisors = first_divisors.map { |i| triangle_number / i }
  first_divisors.count + second_divisors.count
end

index = 1
next_number = get_triangle_number(index)
while (divisor_count(next_number) < 500) do
  index += 1
  next_number = get_triangle_number(index)
end
puts next_number

#puts get_triangle_number(7)
#puts divisor_count(28)

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number 
# would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
# 
# I used the Problem12 overview document from Project Euler to improve my solution.
#
require 'prime'

def get_triangle_number(nth_number)
  (0..nth_number).reduce(:+)
end

def divisor_count(triangle_number)
  number = triangle_number
  divisors = Prime.each(triangle_number).select { |i| triangle_number % i == 0 }

  count = 1
  i = 0
  while i < divisors.count do
    if divisors[i] * divisors[i] > number
      count = count * 2 
      break
    end

    exponent = 1
    while number % divisors[i] == 0 do
      exponent += 1
      number = number/divisors[i]
    end
    count = count * exponent  if exponent > 1 
    break if number == 1
  
    i += 1
  end 
  count
end

index = 1
next_number = get_triangle_number(index)
while (divisor_count(next_number) < 500) do
  index += 1
  next_number = get_triangle_number(index)
end
puts next_number

#puts get_triangle_number(7)
#puts divisor_count(28)
